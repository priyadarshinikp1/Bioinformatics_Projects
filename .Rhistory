setwd("~/R/mofa/cvd")
# Load necessary libraries
library(tidyverse)
library(tibble)
library(MOFA2)
library(readxl)
library(data.table)
library(writexl)
# Read data
dat <- read_excel("modified.xlsx")
head(dat)
# 1. Aggregate repeated measurements (excluding genotype)
dat_agg <- dat %>%
filter(Feature != "genotype") %>%   # Remove genotype temporarily
mutate(Feature = paste0(Feature, "_", GeneSymbol, "_", ProteinID)) %>%  # Modify Feature to Feature_GeneSymbol
group_by(sample, OmicsType, Feature) %>%
summarise(Value = mean(Value, na.rm = TRUE), .groups = "drop") %>%
filter(OmicsType != "genomics")  # Remove empty genomics rows
head(dat_agg)
# Print available omics types
print(unique(dat_agg$OmicsType))
# Function to get the most frequent value (mode) for genotype
get_mode <- function(x) {
unique_x <- unique(na.omit(x))
unique_x[which.max(tabulate(match(x, unique_x)))]
}
# 2. Extract genotype per sample
genotype_data <- dat %>%
filter(Feature == "genotype") %>%
group_by(sample) %>%
summarise(genotype = get_mode(Value), .groups = "drop")
# Ensure genotype is a factor
genotype_data$genotype <- as.factor(genotype_data$genotype)
head(genotype_data)
# 3. Split by OmicsType and pivot separately
transcriptomics <- dat_agg %>%
filter(OmicsType == "Transcriptomics") %>%
dplyr::select(sample, Feature, Value) %>%
pivot_wider(names_from = Feature, values_from = Value, values_fill = 0) %>%
column_to_rownames("sample")
proteomics <- dat_agg %>%
filter(OmicsType == "Proteomics") %>%
dplyr::select(sample, Feature, Value) %>%
pivot_wider(names_from = Feature, values_from = Value, values_fill = 0) %>%
column_to_rownames("sample")
# 4. Convert to numeric matrices and handle missing values
transcriptomics <- as.data.frame(transcriptomics) %>% mutate_all(as.numeric)
proteomics <- as.data.frame(proteomics) %>% mutate_all(as.numeric)
# Replace missing values with column mean
transcriptomics[is.na(transcriptomics)] <- 0
proteomics[is.na(proteomics)] <- 0
# Normalize data
transcriptomics <- scale(transcriptomics)
proteomics <- scale(proteomics)
# 5. Transpose to have samples as columns
transcriptomics <- t(transcriptomics)
proteomics <- t(proteomics)
# 6. Ensure sample consistency
common_samples <- intersect(colnames(transcriptomics), colnames(proteomics))
stopifnot(length(common_samples) > 2)  # At least 3 samples needed
transcriptomics <- transcriptomics[, common_samples, drop = FALSE]
proteomics <- proteomics[, common_samples, drop = FALSE]
head(transcriptomics)
head(proteomics)
genotype_data <- genotype_data %>%
filter(sample %in% common_samples) %>%
column_to_rownames("sample")
head(genotype_data)
# Create MOFA input list
data <- list(
Transcriptomics = transcriptomics,
Proteomics = proteomics
)
head(data)
# 7. Display dimensions of each dataset
lapply(data, dim)
# 8. Create and prepare MOFA object
MOFAobject <- create_mofa(data)
data_opts <- get_default_data_options(MOFAobject)
model_opts <- get_default_model_options(MOFAobject)
train_opts <- get_default_training_options(MOFAobject)
# Set number of factors based on sample size
model_opts$num_factors <- min(3, length(common_samples) - 1)
MOFAobject <- prepare_mofa(
object = MOFAobject,
data_options = data_opts,
model_options = model_opts,
training_options = train_opts
)
# 9. Run MOFA
library(reticulate)
Sys.setenv(RETICULATE_PYTHON = "C:/Program Files/Python312/python.exe")
py_config()
outfile <- file.path(getwd(), "MOFA_final_output.hdf5")
MOFAobject <- run_mofa(MOFAobject, outfile = outfile, use_basilisk = FALSE)
# 10. Load trained model
model <- load_model(outfile)
# 11. Assign genotype as sample metadata
sample_metadata <- data.frame(
sample = colnames(transcriptomics),
mutation_status = as.factor(genotype_data[colnames(transcriptomics), , drop = FALSE][[1]])
)
samples_metadata(model) <- sample_metadata
print(head(samples_metadata(model)))
# 12. Variance Decomposition
print(head(model@cache$variance_explained$r2_total[[1]]))
print(head(model@cache$variance_explained$r2_per_factor[[1]]))
# Ensure gene symbols are properly assigned as row names
rownames(model@data$Transcriptomics) <- rownames(get_data(model, view = "Transcriptomics"))
rownames(model@data$Proteomics) <- rownames(get_data(model, view = "Proteomics"))
plot_factor(model, factor = 1:model@dimensions$K, color_by = "mutation_status")
# Plot top features for each factor (gene names should appear automatically)
plot_top_weights(model, view = "Transcriptomics", factors = 1, nfeatures = 10)
plot_top_weights(model, view = "Proteomics", factors = 1, nfeatures = 10)
plot_data_heatmap(model,
view = "transcriptomics",         # view of interest
factor = 1,             # factor of interest
features = 20,          # number of features to plot (they are selected by weight)
# extra arguments that are passed to the `pheatmap` function
cluster_rows = TRUE, cluster_cols = FALSE,
show_rownames = TRUE, show_colnames = FALSE
)
# Rename views and factors for better interpretation
views_names(model) <- c("Transcriptomics", "Proteomics")
factors_names(model) <- paste("Factor", 1:model@dimensions$K, sep = "")
plot_data_heatmap(model,
view = "transcriptomics",         # view of interest
factor = 1,             # factor of interest
features = 20,          # number of features to plot (they are selected by weight)
# extra arguments that are passed to the `pheatmap` function
cluster_rows = TRUE, cluster_cols = FALSE,
show_rownames = TRUE, show_colnames = FALSE
)
get_views(model)
get_factors(model)
names(model@data)
plot_data_heatmap(model,
view = "Transcriptomics",         # view of interest
factor = 1,             # factor of interest
features = 20,          # number of features to plot (they are selected by weight)
# extra arguments that are passed to the `pheatmap` function
cluster_rows = TRUE, cluster_cols = FALSE,
show_rownames = TRUE, show_colnames = FALSE
)
plot_data_heatmap(model, factor = 2)  # Change factor
head(proteomics)
head(transcriptomics)
# Define file paths
files <- list.files(pattern = "*.xlsx")
# Extract Gene Symbols from multiple Excel files
all_genes <- unique(unlist(lapply(files, function(f) {
df <- read_excel(f, col_types = "text")
if ("GeneSymbol" %in% colnames(df)) {
return(df$GeneSymbol)
} else {
warning(paste("GeneSymbol column not found in", f))
return(NULL)
}
})))
setwd("~/R/mofa/cvd")
# Extract Gene Symbols from multiple Excel files
all_genes <- unique(unlist(lapply(files, function(f) {
df <- read_excel(f, col_types = "text")
if ("GeneSymbol" %in% colnames(df)) {
return(df$GeneSymbol)
} else {
warning(paste("GeneSymbol column not found in", f))
return(NULL)
}
})))
